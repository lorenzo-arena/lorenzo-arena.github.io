"use strict";(self.webpackChunklorenzo_arena_github_io=self.webpackChunklorenzo_arena_github_io||[]).push([[177],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),h=o,g=u["".concat(s,".").concat(h)]||u[h]||m[h]||a;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9292:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={slug:"git-subtree",title:"Git Subtree",date:new Date("2021-10-25T00:00:00.000Z"),authors:"lore",tags:["git","programming","subtree"]},i=void 0,l={permalink:"/git-subtree",source:"@site/blog/2021-10-25-git-subtree/index.md",title:"Git Subtree",description:"The story of how I came into the undocumented git subtree command to help bring back order to an unfortunate",date:"2021-10-25T00:00:00.000Z",formattedDate:"October 25, 2021",tags:[{label:"git",permalink:"/tags/git"},{label:"programming",permalink:"/tags/programming"},{label:"subtree",permalink:"/tags/subtree"}],readingTime:2.05,hasTruncateMarker:!0,authors:[{name:"Lorenzo Arena",url:"https://github.com/lorenzo-arena",imageURL:"https://github.com/lorenzo-arena.png",key:"lore"}],frontMatter:{slug:"git-subtree",title:"Git Subtree",date:"2021-10-25T00:00:00.000Z",authors:"lore",tags:["git","programming","subtree"]},prevItem:{title:"First steps with kas",permalink:"/first-steps-kas"}},s={authorsImageUrls:[void 0]},c=[{value:"A little bit of background",id:"a-little-bit-of-background",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The story of how I came into the undocumented ",(0,o.kt)("inlineCode",{parentName:"p"},"git subtree")," command to help bring back order to an unfortunate\nrepository."),(0,o.kt)("h2",{id:"a-little-bit-of-background"},"A little bit of background"),(0,o.kt)("p",null,'It can happen to make wrong choices; in the programming field, in particular, what often happens is that the\nconsequences arrive suddenly and like an unstoppable escalation. But catastrophisms aside, we come to a need born a few\ndays ago: in one of the git repositories that I use, which had to act as a "warehouse" for some small utilities, the\nsituation has exploded. Managing 15 small projects in a single versioning solution is a real nightmare, so I decided to\ntry to solve the situation, possibly without simply creating new repositories to start from scratch with the commit\nhistory copied into them.'),(0,o.kt)("p",null,"After a little bit of digging, I found a tool which I didn't know anything about: ",(0,o.kt)("strong",{parentName:"p"},"subtree"),"."),(0,o.kt)("p",null,"Subtree is a script created by extern contributors in the git community and it's bundled in the git installation from\nversion ",(0,o.kt)("em",{parentName:"p"},"1.7.11"),", but never added to the official documentation (you can, however, read some informations\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/git/git/blob/master/contrib/subtree/git-subtree.txt%3E"},"here"),"). It allows one to create\n",(0,o.kt)("em",{parentName:"p"},"subtrees"),", which are branches that will join the ones already existent but in an independent manner, creating something\nlike a new repository in the repository."),(0,o.kt)("p",null,"Subtree also offers some commands which enables the execution of really interesting operations: one of them is\n",(0,o.kt)("inlineCode",{parentName:"p"},"split"),", which will create a new branch that will contain the commit history of a subfolder in particular. That\nseems exactly what we need!"),(0,o.kt)("p",null,"Let's suppose that the starting repository has a folder structure like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"   repository\n   \u2502   .git\n   \u2502   .gitignore\n   \u2502\n   \u2514\u2500\u2500\u2500project1\n   \u2502   \u2502   file1_1\n   \u2502   \u2502   file1_2\n   \u2502\n   \u2514\u2500\u2500\u2500project2\n   \u2502   \u2502   file2_1\n   \u2502   \u2502   file2_2\n   \u2502\n   \u2514\u2500\u2500\u2500project3\n   \u2502   \u2502   file3_1\n   \u2502   \u2502   file3_2\n   \u2502\n")),(0,o.kt)("p",null,"Now if we wanted to extract the ",(0,o.kt)("em",{parentName:"p"},"project1")," folder we can go like this: first we must create a subtree which will contain\nonly the commits involving files inside ",(0,o.kt)("em",{parentName:"p"},"project1")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ git subtree split --prefix=project1 -b split-branch-project1\n")),(0,o.kt)("p",null,"Then, we can move into another folder and create the future repository"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ mkdir project1\n$ cd project1\n$ git init\n")),(0,o.kt)("p",null,"Let's execute a pull from the old repository, referencing the newly created branch:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ git pull ~/repository split-branch-project1\n")),(0,o.kt)("p",null,"At this point ",(0,o.kt)("em",{parentName:"p"},"project1")," will contain only the commit history involving that project; by repeating the process for each\nproject we can have cleaner repositories without losing the history."))}m.isMDXComponent=!0}}]);