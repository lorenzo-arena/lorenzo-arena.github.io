"use strict";(self.webpackChunklorenzo_arena_github_io=self.webpackChunklorenzo_arena_github_io||[]).push([[388],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>u});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},h=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),p=d(n),m=i,u=p["".concat(s,".").concat(m)]||p[m]||c[m]||o;return n?a.createElement(u,r(r({ref:t},h),{},{components:n})):a.createElement(u,r({ref:t},h))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:i,r[1]=l;for(var d=2;d<o;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3428:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var a=n(7462),i=(n(7294),n(3905));const o={slug:"godot-wind-trails",title:"Creating 2D wind trails in Godot",date:new Date("2023-04-02T00:00:00.000Z"),authors:"lore",tags:["godot","gamedev"]},r=void 0,l={permalink:"/godot-wind-trails",source:"@site/blog/2023-04-02-godot-wind-trails/index.md",title:"Creating 2D wind trails in Godot",description:"From first the moment I played Titan Souls for the first time, I fell in",date:"2023-04-02T00:00:00.000Z",formattedDate:"April 2, 2023",tags:[{label:"godot",permalink:"/tags/godot"},{label:"gamedev",permalink:"/tags/gamedev"}],readingTime:4.515,hasTruncateMarker:!0,authors:[{name:"Lorenzo Arena",url:"https://github.com/lorenzo-arena",imageURL:"https://github.com/lorenzo-arena.png",key:"lore"}],frontMatter:{slug:"godot-wind-trails",title:"Creating 2D wind trails in Godot",date:"2023-04-02T00:00:00.000Z",authors:"lore",tags:["godot","gamedev"]},nextItem:{title:"First steps with kas",permalink:"/first-steps-kas"}},s={authorsImageUrls:[void 0]},d=[{value:"The idea",id:"the-idea",level:2},{value:"The implementation",id:"the-implementation",level:2},{value:"Using the WindTrail scene",id:"using-the-windtrail-scene",level:2},{value:"Improvements",id:"improvements",level:2}],h={toc:d},p="wrapper";function c(e){let{components:t,...o}=e;return(0,i.kt)(p,(0,a.Z)({},h,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"From first the moment I played ",(0,i.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=9AV4Cd7wdpA"},"Titan Souls")," for the first time, I fell in\nlove with its environment art. One detail caught my attention: the wind represented as trails over the scene. I tried to\nrecreate a similar effect in ",(0,i.kt)("a",{parentName:"p",href:"https://godotengine.org/"},"Godot"),"."),(0,i.kt)("p",null,"I came up with this solution after watching ",(0,i.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=0HCzL5ealtI"},"this tutorial"),"; however the\neffect didn't exactly match my desired outcome so I had to rework it a little bit."),(0,i.kt)("p",null,"The following GIF shows the end result (in which the effect was purposefully exaggerated with a long trail):"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"The end result",src:n(465).Z,width:"1000",height:"563"})),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"I used C# scripting to implement the solution, however the code from this article can be easily ported to GDScript.")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The whole thing has been developed on the latest Godot 4 stable version as of the time of writing.")),(0,i.kt)("h2",{id:"the-idea"},"The idea"),(0,i.kt)("p",null,'The main idea is to use the native Line2D Godot node and create various "segments" to create the line movement. This\nwill be used together with a Path2D node and a list of PathFollow2D nodes to move the line points on the desired path.'),(0,i.kt)("p",null,'The scene will be created without a predefined Path2D child node, and each scene which instantiate a "WindTrail" node\nwill have to provide the Path2D for that trail node.'),(0,i.kt)("h2",{id:"the-implementation"},"The implementation"),(0,i.kt)("p",null,'Start by creating a new scene of type Line2D; rename the base node to "WindTrail" and save the scene as\n',(0,i.kt)("inlineCode",{parentName:"p"},"wind_trail.tscn"),". Attach a C# script to it (rename it to ",(0,i.kt)("inlineCode",{parentName:"p"},"WindTrail.cs"),") the add the following exports to configure\nsome of the trail properties:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs",metastring:'title="WindTrail.cs"',title:'"WindTrail.cs"'},"[Export]\nprivate int segments = 30;\n[Export]\nprivate float pathLength = 15;\n[Export]\nprivate float pathSpeed = 200;\n")),(0,i.kt)("p",null,"Then on the top of the script add the directive to include .NET collections, since we'll need to use a ",(0,i.kt)("inlineCode",{parentName:"p"},"List")," for the\n",(0,i.kt)("inlineCode",{parentName:"p"},"PathFollow2D")," nodes; also add such list and a property to keep a reference to a Path2D child node:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs",metastring:'title="WindTrail.cs"',title:'"WindTrail.cs"'},"/* On the top of the script */\nusing System.Collections.Generic;\n...\n/* Inside our custom node class */\n// This will contain a reference to the Path2D node created\n// by whoever instantiated the scene\nprivate Path2D path2D;\nprivate List<PathFollow2D> pathFollowList = new();\n")),(0,i.kt)("p",null,"We'll use a method to dynamically add PathFollow2D children to the Path2D node; they should be distanced so that the\nline has the desired length, and that will be tracked in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Progress")," property of each PathFollow2D node:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs",metastring:'title="WindTrail.cs"',title:'"WindTrail.cs"'},"private void InitPathFollowers()\n{\n    for (int i = 0; i < segments; i++)\n    {\n        var newPathFollow = new PathFollow2D();\n        path2D.AddChild(newPathFollow);\n\n        newPathFollow.Progress = (i / (float)(segments - 1)) * (-pathLength);\n        newPathFollow.Loop = false;\n\n        pathFollowList.Add(newPathFollow);\n    }\n}\n")),(0,i.kt)("p",null,"Override the ",(0,i.kt)("inlineCode",{parentName:"p"},"_Ready")," method to initialize the path followers:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs",metastring:'title="WindTrail.cs"',title:'"WindTrail.cs"'},'public override void _Ready()\n{\n    path2D = GetNode<Path2D>("Path2D");\n    if (path2D == null)\n    {\n        GD.Print("missing Path2D child for WindTrail");\n        return;\n    }\n\n    InitPathFollowers();\n}\n')),(0,i.kt)("p",null,"Now on each frame we need to advance the progress of the PathFollow2D nodes and to redraw the line according the their\nupdated position. Let's first implement the method to move the PathFollow2D nodes:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs",metastring:'title="WindTrail.cs"',title:'"WindTrail.cs"'},"private void MovePath(double delta)\n{\n    int firstUncompletePointIndex =\n        pathFollowList.FindIndex(0, pathFollowList.Count, pf => pf.ProgressRatio < 1.0f);\n    pathFollowList[firstUncompletePointIndex].Progress += (float)(pathSpeed * delta);\n\n    for (int i = firstUncompletePointIndex + 1; i < segments; i++)\n    {\n        pathFollowList[i].Progress =\n            pathFollowList[i - 1].Progress - (((i / (float)(segments - 1)) * (pathLength)));\n    }\n}\n")),(0,i.kt)("p",null,"For the effect that we want to achieve we should find the first PathFollow2D node which hasn't reached the Path2D end;\nthen such node should be advanced according to the configured speed and each node after that based on the trail length.\nThis way the trail will \"compress\" toward the path's end."),(0,i.kt)("p",null,"Then we also need a method to redraw the line based on the update position of the PathFollow2D nodes:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs",metastring:'title="WindTrail.cs"',title:'"WindTrail.cs"'},"private void DrawPath()\n{\n    ClearPoints();\n\n    foreach (var pathFollow in pathFollowList)\n    {\n        AddPoint(pathFollow.GlobalPosition);\n    }\n}\n")),(0,i.kt)("p",null,"Let's put it together to advance the trail on each frame:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs",metastring:'title="WindTrail.cs"',title:'"WindTrail.cs"'},"public override void _Process(double delta)\n{\n    if (path2D == null)\n    {\n        return;\n    }\n\n    MovePath(delta);\n    DrawPath();\n}\n")),(0,i.kt)("p",null,"Let's also edit some of the Line2D properties: in the Inspector tab change the line width to 5px, then create a new\n",(0,i.kt)("em",{parentName:"p"},"Width Curve"),' by clicking on the empty box and selecting "New curve". Add 3 points by clicking "Add element" and set\ntheir values as given in the following image:'),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Width Curve settings",src:n(1523).Z,width:"275",height:"843"})),(0,i.kt)("p",null,"This will give the wind trail a little bit of width variation while it's moving."),(0,i.kt)("h2",{id:"using-the-windtrail-scene"},"Using the WindTrail scene"),(0,i.kt)("p",null,"Now when we need to show a new wind trail on our game scene we can just instantiate a WindTrail node, add a Path2D\nchild with a configured path and the effect will be shown on the scene startup."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Using the WindTrail scene",src:n(5830).Z,width:"1118",height:"571"})),(0,i.kt)("h2",{id:"improvements"},"Improvements"),(0,i.kt)("p",null,"Possible improvements would be:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"adding an auto-clean feature, so that the WindTrail node gets freed as soon as the trail reaches the end; this can be\ndone easily by adding a couple of lines of code at the end of the ",(0,i.kt)("inlineCode",{parentName:"p"},"MovePath")," method:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"// Check if the last PathFollow2D node has reached the end of the trail\nif (pathFollowList[pathFollowList.Count - 1].ProgressRatio >= 1.0f)\n{\n    QueueFree();\n}\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"having a method to start/restart/stop the trail programmatically, so that we can instantiate a number of wind trails\nin our scene and having something like a ",(0,i.kt)("inlineCode",{parentName:"p"},"WindTrailController")," node which randomly starts one or more of those trails"))))}c.isMDXComponent=!0},465:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/result-e63cfde0211ede48446448da57d86da4.gif"},1523:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/width_curve-2b38fe466676f0865a03c7f8e181b0b7.png"},5830:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/wind_trail_instance-9112b3c55e0387034e850153525f4472.png"}}]);