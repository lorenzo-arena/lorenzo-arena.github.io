"use strict";(self.webpackChunklorenzo_arena_github_io=self.webpackChunklorenzo_arena_github_io||[]).push([[477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"wsl-ethernet-adapter","metadata":{"permalink":"/blog/wsl-ethernet-adapter","source":"@site/blog/2023-08-25-wsl-ethernet-adapter/index.md","title":"Enabling support for USB Ethernet adapter in WSL 2","description":"WSL was a great introduction in Windows for developers who were familiar with working in a Linux environment; however","date":"2023-08-25T00:00:00.000Z","formattedDate":"August 25, 2023","tags":[{"label":"linux","permalink":"/blog/tags/linux"},{"label":"windows","permalink":"/blog/tags/windows"},{"label":"wsl","permalink":"/blog/tags/wsl"},{"label":"kernel","permalink":"/blog/tags/kernel"}],"readingTime":2.69,"hasTruncateMarker":false,"authors":[{"name":"Lorenzo Arena","url":"https://github.com/lorenzo-arena","imageURL":"https://github.com/lorenzo-arena.png","key":"lore"}],"frontMatter":{"slug":"wsl-ethernet-adapter","title":"Enabling support for USB Ethernet adapter in WSL 2","date":"2023-08-25T00:00:00.000Z","authors":"lore","tags":["linux","windows","wsl","kernel"]},"nextItem":{"title":"Creating 2D wind trails in Godot","permalink":"/blog/godot-wind-trails"}},"content":"WSL was a great introduction in Windows for developers who were familiar with working in a Linux environment; however\\none of the main pain points of WSL 1 was the extremely slowness when working with files. That changed in better with\\nWSL 2, but the new virtualization system came with a fully NATted VM. Unfortunately that led WSL 2 to not being usable\\nfor some environments, for example when UDP communication or broadcasting is needed.\\n\\nRecently I had some USB Ethernet adapters laying around, and I thought about making it work with WSL 2, with the help\\nof the `usbipd` tool.\\n\\n### Recompiling the WSL kernel\\nThe first step to make the adapter work under the WSL is to recompile its kernel so that the necessary drivers are\\nadded.\\n\\nOpen a WSL terminal and run:\\n\\n```bash\\n# Install the building dependencies\\n$ sudo apt install build-essential flex bison libssl-dev libelf-dev git dwarves libncurses-dev bc\\n$ git clone https://github.com/microsoft/WSL2-Linux-Kernel.git\\n$ cd WSL2-Linux-Kernel\\n$ cp Microsoft/config-wsl .config\\n```\\n\\nNow that we have the sources available, the next thing to do is to update the kernel configuration so that our ethernet\\nadapter is supported. In my case, I had `USBNET` already enabled but I needed an additional driver.\\n\\n```bash\\n# Enter the configuration menu\\n$ make menuconfig\\n```\\n\\nSearch the relevant driver using `/`; in my case it was `RTL8152`. Press `1` to navigate to the corresponding\\nconfiguration entry and `Y` to add it to the configuration. Using the arrow keys navigate to `< Save >`, leave the\\ndefault `.config` name and the configuration menu.\\n\\nNow build the updated kernel:\\n\\n```bash\\n# Use your core count as the -j argument\\n$ make -j16\\n```\\n\\n### Starting the WSL with the custom kernel\\nNow that we have a custom kernel, we need to configure the WSL so that it\'s used when starting it up. Copy the kernel\\nbinary to Windows:\\n\\n```bash\\n$ cp arch/x86/boot/bzImage /mnt/c/Users/<username>\\n```\\n\\nThen create a file in `%userprofile%\\\\.wslconfig` with the following content:\\n\\n```ini\\n[wsl2]\\n; Double backslashes are required!\\nkernel=C:\\\\\\\\Users\\\\\\\\<username>\\\\\\\\bzimage\\n```\\n\\nClose all the WSL terminals, then in Powershell run:\\n\\n```powershell\\n> wsl --shutdown\\n```\\n\\nReopen a WSL terminal.\\n\\n### Insalling usbipd\\nTo use a USB device from the WSL, we can follow the instructions found at\\nhttps://learn.microsoft.com/it-it/windows/wsl/connect-usb: go to the\\n[release page for usbipd](https://github.com/dorssel/usbipd-win/releases) and download the setup file from the latest\\nrelease; then install it. In the WSL terminal, run:\\n\\n```bash\\n$ sudo apt install linux-tools-generic hwdata\\n$ sudo update-alternatives --install /usr/local/bin/usbip usbip /usr/lib/linux-tools/*-generic/usbip 20\\n```\\n\\n### Using a USB device\\nEvery time a USB device must be used from within the WSL, open a Powershell and run:\\n\\n```powershell\\n> usbipd wsl list\\n```\\n\\nThis will list the available USB devices together with a bus identifier; search for the USB ethernet adapter device,\\nthen run:\\n\\n```powershell\\n> usbipd wsl attach --busid <busid>\\n```\\n\\nIn the WSL terminal, run:\\n\\n```bash\\n$ lsusb\\n```\\n\\nThis should print the ethernet adapter in the device list; this procedure must be followed every time the PC is turned\\non.\\n\\nBy default, no network manager is installed in WSL, so I had to manually turn on the interface and start a DHCP client\\nfor the new interface, then it was fully working."},{"id":"godot-wind-trails","metadata":{"permalink":"/blog/godot-wind-trails","source":"@site/blog/2023-04-02-godot-wind-trails/index.md","title":"Creating 2D wind trails in Godot","description":"From first the moment I played Titan Souls for the first time, I fell in","date":"2023-04-02T00:00:00.000Z","formattedDate":"April 2, 2023","tags":[{"label":"godot","permalink":"/blog/tags/godot"},{"label":"gamedev","permalink":"/blog/tags/gamedev"}],"readingTime":4.515,"hasTruncateMarker":true,"authors":[{"name":"Lorenzo Arena","url":"https://github.com/lorenzo-arena","imageURL":"https://github.com/lorenzo-arena.png","key":"lore"}],"frontMatter":{"slug":"godot-wind-trails","title":"Creating 2D wind trails in Godot","date":"2023-04-02T00:00:00.000Z","authors":"lore","tags":["godot","gamedev"]},"prevItem":{"title":"Enabling support for USB Ethernet adapter in WSL 2","permalink":"/blog/wsl-ethernet-adapter"},"nextItem":{"title":"First steps with kas","permalink":"/blog/first-steps-kas"}},"content":"From first the moment I played [Titan Souls](https://www.youtube.com/watch?v=9AV4Cd7wdpA) for the first time, I fell in\\nlove with its environment art. One detail caught my attention: the wind represented as trails over the scene. I tried to\\nrecreate a similar effect in [Godot](https://godotengine.org/).\\n\\n\x3c!--truncate--\x3e\\n\\nI came up with this solution after watching [this tutorial](https://www.youtube.com/watch?v=0HCzL5ealtI); however the\\neffect didn\'t exactly match my desired outcome so I had to rework it a little bit.\\n\\nThe following GIF shows the end result (in which the effect was purposefully exaggerated with a long trail):\\n\\n![The end result](./result.gif)\\n\\n:::note\\n\\nI used C# scripting to implement the solution, however the code from this article can be easily ported to GDScript.\\n\\n:::\\n\\n:::note\\n\\nThe whole thing has been developed on the latest Godot 4 stable version as of the time of writing.\\n\\n:::\\n\\n## The idea\\n\\nThe main idea is to use the native Line2D Godot node and create various \\"segments\\" to create the line movement. This\\nwill be used together with a Path2D node and a list of PathFollow2D nodes to move the line points on the desired path.\\n\\nThe scene will be created without a predefined Path2D child node, and each scene which instantiate a \\"WindTrail\\" node\\nwill have to provide the Path2D for that trail node.\\n\\n## The implementation\\n\\nStart by creating a new scene of type Line2D; rename the base node to \\"WindTrail\\" and save the scene as\\n`wind_trail.tscn`. Attach a C# script to it (rename it to `WindTrail.cs`) the add the following exports to configure\\nsome of the trail properties:\\n\\n```cs title=\\"WindTrail.cs\\"\\n[Export]\\nprivate int segments = 30;\\n[Export]\\nprivate float pathLength = 15;\\n[Export]\\nprivate float pathSpeed = 200;\\n```\\n\\nThen on the top of the script add the directive to include .NET collections, since we\'ll need to use a `List` for the\\n`PathFollow2D` nodes; also add such list and a property to keep a reference to a Path2D child node:\\n\\n```cs title=\\"WindTrail.cs\\"\\n/* On the top of the script */\\nusing System.Collections.Generic;\\n...\\n/* Inside our custom node class */\\n// This will contain a reference to the Path2D node created\\n// by whoever instantiated the scene\\nprivate Path2D path2D;\\nprivate List<PathFollow2D> pathFollowList = new();\\n```\\n\\nWe\'ll use a method to dynamically add PathFollow2D children to the Path2D node; they should be distanced so that the\\nline has the desired length, and that will be tracked in the `Progress` property of each PathFollow2D node:\\n\\n```cs title=\\"WindTrail.cs\\"\\nprivate void InitPathFollowers()\\n{\\n    for (int i = 0; i < segments; i++)\\n    {\\n        var newPathFollow = new PathFollow2D();\\n        path2D.AddChild(newPathFollow);\\n\\n        newPathFollow.Progress = (i / (float)(segments - 1)) * (-pathLength);\\n        newPathFollow.Loop = false;\\n\\n        pathFollowList.Add(newPathFollow);\\n    }\\n}\\n```\\n\\nOverride the `_Ready` method to initialize the path followers:\\n\\n```cs title=\\"WindTrail.cs\\"\\npublic override void _Ready()\\n{\\n    path2D = GetNode<Path2D>(\\"Path2D\\");\\n    if (path2D == null)\\n    {\\n        GD.Print(\\"missing Path2D child for WindTrail\\");\\n        return;\\n    }\\n\\n    InitPathFollowers();\\n}\\n```\\n\\nNow on each frame we need to advance the progress of the PathFollow2D nodes and to redraw the line according the their\\nupdated position. Let\'s first implement the method to move the PathFollow2D nodes:\\n\\n```cs title=\\"WindTrail.cs\\"\\nprivate void MovePath(double delta)\\n{\\n    int firstUncompletePointIndex =\\n        pathFollowList.FindIndex(0, pathFollowList.Count, pf => pf.ProgressRatio < 1.0f);\\n    pathFollowList[firstUncompletePointIndex].Progress += (float)(pathSpeed * delta);\\n\\n    for (int i = firstUncompletePointIndex + 1; i < segments; i++)\\n    {\\n        pathFollowList[i].Progress =\\n            pathFollowList[i - 1].Progress - (((i / (float)(segments - 1)) * (pathLength)));\\n    }\\n}\\n```\\n\\nFor the effect that we want to achieve we should find the first PathFollow2D node which hasn\'t reached the Path2D end;\\nthen such node should be advanced according to the configured speed and each node after that based on the trail length.\\nThis way the trail will \\"compress\\" toward the path\'s end.\\n\\nThen we also need a method to redraw the line based on the update position of the PathFollow2D nodes:\\n\\n```cs title=\\"WindTrail.cs\\"\\nprivate void DrawPath()\\n{\\n    ClearPoints();\\n\\n    foreach (var pathFollow in pathFollowList)\\n    {\\n        AddPoint(pathFollow.GlobalPosition);\\n    }\\n}\\n```\\n\\nLet\'s put it together to advance the trail on each frame:\\n\\n```cs title=\\"WindTrail.cs\\"\\npublic override void _Process(double delta)\\n{\\n    if (path2D == null)\\n    {\\n        return;\\n    }\\n\\n    MovePath(delta);\\n    DrawPath();\\n}\\n```\\n\\nLet\'s also edit some of the Line2D properties: in the Inspector tab change the line width to 5px, then create a new\\n*Width Curve* by clicking on the empty box and selecting \\"New curve\\". Add 3 points by clicking \\"Add element\\" and set\\ntheir values as given in the following image:\\n\\n![Width Curve settings](./width_curve.png)\\n\\nThis will give the wind trail a little bit of width variation while it\'s moving.\\n\\n## Using the WindTrail scene\\n\\nNow when we need to show a new wind trail on our game scene we can just instantiate a WindTrail node, add a Path2D\\nchild with a configured path and the effect will be shown on the scene startup.\\n\\n![Using the WindTrail scene](./wind_trail_instance.png)\\n\\n## Improvements\\n\\nPossible improvements would be:\\n\\n* adding an auto-clean feature, so that the WindTrail node gets freed as soon as the trail reaches the end; this can be\\n  done easily by adding a couple of lines of code at the end of the `MovePath` method:\\n\\n  ```cs\\n  // Check if the last PathFollow2D node has reached the end of the trail\\n  if (pathFollowList[pathFollowList.Count - 1].ProgressRatio >= 1.0f)\\n  {\\n      QueueFree();\\n  }\\n  ```\\n\\n* having a method to start/restart/stop the trail programmatically, so that we can instantiate a number of wind trails\\n  in our scene and having something like a `WindTrailController` node which randomly starts one or more of those trails"},{"id":"first-steps-kas","metadata":{"permalink":"/blog/first-steps-kas","source":"@site/blog/2021-10-29-first-steps-kas/index.md","title":"First steps with kas","description":"I often work with the Yocto Project to build custom Linux distributions for a","date":"2021-10-29T00:00:00.000Z","formattedDate":"October 29, 2021","tags":[{"label":"linux","permalink":"/blog/tags/linux"},{"label":"yocto","permalink":"/blog/tags/yocto"},{"label":"kas","permalink":"/blog/tags/kas"}],"readingTime":4.325,"hasTruncateMarker":true,"authors":[{"name":"Lorenzo Arena","url":"https://github.com/lorenzo-arena","imageURL":"https://github.com/lorenzo-arena.png","key":"lore"}],"frontMatter":{"slug":"first-steps-kas","title":"First steps with kas","date":"2021-10-29T00:00:00.000Z","authors":"lore","tags":["linux","yocto","kas"]},"prevItem":{"title":"Creating 2D wind trails in Godot","permalink":"/blog/godot-wind-trails"},"nextItem":{"title":"Git Subtree","permalink":"/blog/git-subtree"}},"content":"I often work with the [Yocto Project](https://www.yoctoproject.org/) to build custom Linux distributions for a\\nvarious range of products. One of the main struggles you can have while working with this tool is managing multiple\\ngit repositories in order to produce a successful build. A new tool called [kas](https://github.com/siemens/kas) tries\\nto simplify this process; let\'s see how by building a distribution for a Pine64 board.\\n\\n\x3c!--truncate--\x3e\\n\\n## Installation\\n\\nFirst, we must install python3 and pip, together with some other dependencies:\\n\\n```bash\\n$ sudo apt install python3 python3-pip\\n$ pip3 install distro jsonschema PyYAML\\n```\\n\\nThen install kas; I had a problem with a dependency so I had to install another package by hand\\n\\n```bash\\n$ pip3 install testresources\\n$ pip3 install kas\\n```\\n\\n## Running a simple build\\n\\nAs an example, we can try to build a simple image for the qemu machine which is already contained in the poky\\nrepository. We need to create a special file, *kas-project.yml*, which will describe how our distribution must be built\\nand which layers must be included; we will use the file provided by the kas documentation, with some small tweaks.\\nCreate a folder for the project:\\n\\n```bash\\n$ mkdir kas-pine64\\n$ touch kas-project.yml\\n```\\n\\nAdd the following snippet to the project configuration file:\\n\\n```yaml\\nheader:\\n   version: 11\\nmachine: qemux86-64\\ndistro: poky\\ntarget: core-image-minimal\\nrepos:\\n   kas-pine64:\\n   poky:\\n   url: \\"https://git.yoctoproject.org/git/poky\\"\\n   refspec: hardknott\\n   layers:\\n   meta:\\n   meta-poky:\\n   meta-yocto-bsp:\\nlocal_conf_header:\\n   kas-pine64: |\\n   EXTRA_IMAGE_FEATURES += \\"debug-tweaks\\"\\n```\\n\\nThe *kas-project.yml* file is written in [YAML](https://en.wikipedia.org/wiki/YAML), a minimal markup language often\\nused for configuration files. It allows us to describe our distribution in a very clear way; in this example we will be\\nbuilding the *core-image-minimal* image based on the *poky* distribution for a *qemux86-64* machine. The layer used are\\nthe ones contained in the *poky* layer, listed in the configuration file. The `local_conf_header` section allows\\nus to add any line to the *local.conf* file in the build folder.\\n\\nWe can now use one of the available *kas* commands, `build`:\\n\\n```bash\\n$ kas build kas-project.yml\\n```\\n\\nkas will clone the repositories indicated in out project file (just poky in this case) and start the build process\\nusing `bitbake` for the *distro* and *machine* we set; at the end of the build process we will have a *build*\\nfolder with the same structure of any Yocto project build.\\n\\n## Other kas commands\\n\\nOne other useful kas command is `shell`. We can run it like\\n\\n```bash\\n$ kas shell kas-project.yml\\n```\\n\\nand what it does is it opens a new shell instance with the build environment loaded. We can also provide a custom\\ncommand to execute inside the new shell; for example to replicate the previous build command, we could run:\\n\\n```bash\\n$ kas shell kas-project.yml -c \\"bitbake core-image-minimal\\"\\n```\\n\\nSince we are running through the basic Yocto demo, we can now try to load the virtual QEMU image:\\n\\n```bash\\n$ kas shell kas-project.yml\\n$ runqemu qemux86-64 core-image-minimal nographic\\n```\\n\\nIt will prompt for the admin password to create the tap interfaces, then, after the boot sequence, we can login with\\n\\"root\\" (since we enabled `debug-tweaks` in the project file). I also tried graphic mode but for some reason the\\nGUI never appears, maybe for some restrictions coming from the kas environment.\\n\\n## Integrating with more layers\\n\\n![The Pine A64 board](./pine64-plus.jpg)\\n\\nNow let\'s add some more layers to build an image for a real board, the\\n[Pine A64](https://www.pine64.org/devices/single-board-computers/pine-a64-lts/). Under the \\"repos\\" section of the\\nconfiguration file, add the following lines:\\n\\n```yaml\\n   meta-openembedded:\\n     url: \\"https://github.com/openembedded/meta-openembedded.git\\"\\n     refspec: hardknott\\n     layers:\\n       meta-oe:\\n   meta-sunxi:\\n     url: \\"https://github.com/linux-sunxi/meta-sunxi.git\\"\\n     refspec: hardknott\\n```\\n\\nWe can add also one custom layer; it could be fetched from a private git repository, but it can be a simple folder in\\nthe project structure as well:\\n\\n```bash\\n$ mkdir meta-custom-pine64\\n```\\n\\nCreate also a *meta-custom-pine64/conf/layer.conf* file for our custom layer:\\n\\n```\\n# We have a conf and classes directory, add to BBPATH\\nBBPATH .= \\":${LAYERDIR}\\"\\n\\n# We have recipes-* directories, add to BBFILES\\nBBFILES += \\"${LAYERDIR}/recipes-*/*/*.bb \\\\\\n            ${LAYERDIR}/recipes-*/*/*.bbappend\\"\\n\\nBBFILE_COLLECTIONS += \\"meta-custom-pine64\\"\\nBBFILE_PATTERN_meta-custom-pine64 = \\"^${LAYERDIR}/\\"\\nBBFILE_PRIORITY_meta-custom-pine64 = \\"10\\"\\n\\nLAYERDEPENDS_meta-custom-pine64 = \\"\\"\\nLAYERSERIES_COMPAT_meta-custom-pine64 = \\"hardknott\\"\\n```\\n\\nWe can then add a new custom image creating the *meta-custom-pine64/recipes-images/images/kas-custom-image.bb* recipe:\\n\\n```\\nSUMMARY = \\"kas custom image\\"\\nLICENSE = \\"MIT\\"\\n\\ninherit core-image\\n\\nIMAGE_FEATURES += \\"ssh-server-openssh\\"\\n```\\n\\nSet the image as the build target by changing it in the project configuration file, and add the new layers as well; the\\nmachine can be set to `pine64-plus`:\\n\\n```yaml\\n...\\nmachine: pine64-plus\\ndistro: poky\\ntarget: kas-custom-image\\n...\\n# Add the new layer in our project section\\nrepos:\\n  kas-pine64:\\n    layers:\\n      meta-custom-pine64:\\n```\\n\\nThe build process can be run again with:\\n\\n```bash\\n$ kas build kas-project.yml\\n# Once the build process ends, we can flash the image\\n$ cd build/tmp/deploy/images/pine64-plus/\\n$ sudo dd if=kas-custom-image-pine64-plus.sunxi-sdimg of=/dev/sd<X> bs=1024 status=progress\\n```\\nIf we boot the board using the flashed SD image, we will have a system with a basic image and an ssh server; this can\\nwork as a canvas for more structured projects.\\n\\nA small note: at the time of writing there is an issue with U-Boot in\\n[meta-sunxi](https://github.com/linux-sunxi/meta-sunxi) for the pine64-plus machine; I opened a\\n[pull request](https://github.com/linux-sunxi/meta-sunxi/pull/330) to fix that; apply that patch if you want to try to\\nbuild the project."},{"id":"git-subtree","metadata":{"permalink":"/blog/git-subtree","source":"@site/blog/2021-10-25-git-subtree/index.md","title":"Git Subtree","description":"The story of how I came into the undocumented git subtree command to help bring back order to an unfortunate","date":"2021-10-25T00:00:00.000Z","formattedDate":"October 25, 2021","tags":[{"label":"git","permalink":"/blog/tags/git"},{"label":"programming","permalink":"/blog/tags/programming"},{"label":"subtree","permalink":"/blog/tags/subtree"}],"readingTime":2.05,"hasTruncateMarker":true,"authors":[{"name":"Lorenzo Arena","url":"https://github.com/lorenzo-arena","imageURL":"https://github.com/lorenzo-arena.png","key":"lore"}],"frontMatter":{"slug":"git-subtree","title":"Git Subtree","date":"2021-10-25T00:00:00.000Z","authors":"lore","tags":["git","programming","subtree"]},"prevItem":{"title":"First steps with kas","permalink":"/blog/first-steps-kas"}},"content":"The story of how I came into the undocumented `git subtree` command to help bring back order to an unfortunate\\nrepository.\\n\\n\x3c!--truncate--\x3e\\n\\n## A little bit of background\\n\\nIt can happen to make wrong choices; in the programming field, in particular, what often happens is that the\\nconsequences arrive suddenly and like an unstoppable escalation. But catastrophisms aside, we come to a need born a few\\ndays ago: in one of the git repositories that I use, which had to act as a \\"warehouse\\" for some small utilities, the\\nsituation has exploded. Managing 15 small projects in a single versioning solution is a real nightmare, so I decided to\\ntry to solve the situation, possibly without simply creating new repositories to start from scratch with the commit\\nhistory copied into them.\\n\\nAfter a little bit of digging, I found a tool which I didn\'t know anything about: **subtree**.\\n\\nSubtree is a script created by extern contributors in the git community and it\'s bundled in the git installation from\\nversion *1.7.11*, but never added to the official documentation (you can, however, read some informations\\n[here](https://github.com/git/git/blob/master/contrib/subtree/git-subtree.txt>)). It allows one to create\\n*subtrees*, which are branches that will join the ones already existent but in an independent manner, creating something\\nlike a new repository in the repository.\\n\\nSubtree also offers some commands which enables the execution of really interesting operations: one of them is\\n`split`, which will create a new branch that will contain the commit history of a subfolder in particular. That\\nseems exactly what we need!\\n\\nLet\'s suppose that the starting repository has a folder structure like this:\\n\\n```\\n   repository\\n   \u2502   .git\\n   \u2502   .gitignore\\n   \u2502\\n   \u2514\u2500\u2500\u2500project1\\n   \u2502   \u2502   file1_1\\n   \u2502   \u2502   file1_2\\n   \u2502\\n   \u2514\u2500\u2500\u2500project2\\n   \u2502   \u2502   file2_1\\n   \u2502   \u2502   file2_2\\n   \u2502\\n   \u2514\u2500\u2500\u2500project3\\n   \u2502   \u2502   file3_1\\n   \u2502   \u2502   file3_2\\n   \u2502\\n```\\n\\nNow if we wanted to extract the *project1* folder we can go like this: first we must create a subtree which will contain\\nonly the commits involving files inside *project1*\\n\\n```bash\\n$ git subtree split --prefix=project1 -b split-branch-project1\\n```\\n\\nThen, we can move into another folder and create the future repository\\n\\n```bash\\n$ mkdir project1\\n$ cd project1\\n$ git init\\n```\\n\\nLet\'s execute a pull from the old repository, referencing the newly created branch:\\n\\n```bash\\n$ git pull ~/repository split-branch-project1\\n```\\n\\nAt this point *project1* will contain only the commit history involving that project; by repeating the process for each\\nproject we can have cleaner repositories without losing the history."}]}')}}]);